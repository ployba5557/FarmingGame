using UnityEngine;
using TMPro;
using System.Collections.Generic;
using UnityEngine.UI;
using System.Collections; // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Coroutine
using UnityEngine.SceneManagement;

public class UIManager : MonoBehaviour
{
    // === UI Panels and Containers ===
    public GameObject questPanel;
    public GameObject questListParent;
    public GameObject questButtonPrefab;
    
    public GameObject questDetailPanel;

    // === Text Components ===
    public TextMeshProUGUI questListText; // (‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ Prefab ‡∏õ‡∏∏‡πà‡∏°)
    public TextMeshProUGUI detailQuestNameText;
    public TextMeshProUGUI detailQuestDescriptionText;
    public TextMeshProUGUI questProgressText;

    [Header("Scene Management")]
    public string lobbySceneName = "LobbyScene"; 

      [Header("Confirmation Panel")]
    public GameObject confirmationPanel;
    public Button confirmLobbyButton;
    public Button cancelLobbyButton;

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏â‡∏≤‡∏Å)
    public Button goToLobbyButton;
    
    // === Reward Notification UI ===
    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
    public TextMeshProUGUI rewardNotificationText; 
    public float notificationDisplayTime = 3f;

    // === Buttons ===
    public Button acceptButton;
    public Button cancelButton;
    public Button backButton;
    public Button completeButton;

    // === Internal State ===
    private bool isQuestPanelOpen = false;
    private IQuest _selectedQuest;

    public GameObject questionPanel;

    // === Singleton ===
    public static UIManager Instance { get; private set; }

    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
        }
        else
        {
            Destroy(gameObject);
        }
    }

    private void Start()
    {
        // ‡∏•‡∏ö Listener ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡∏ú‡∏π‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Inspector ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏Ñ‡πâ‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏≠‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        if (goToLobbyButton != null)
        {
            goToLobbyButton.onClick.RemoveAllListeners();
            
            // ‡∏ú‡∏π‡∏Å Listener ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î
            goToLobbyButton.onClick.AddListener(ShowLobbyConfirmation);
        }
    }

    // ===================================
    // QUEST PANEL MANAGEMENT
    // ===================================

    public void ToggleQuestPanel()
    {
        isQuestPanelOpen = !isQuestPanelOpen;
        questPanel.SetActive(isQuestPanelOpen);
        
        if (isQuestPanelOpen)
        {
            DisplayQuestList();
            HideQuestDetails();
        }
    }

    public void DisplayQuestList()
    {
        // ‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Ñ‡∏ß‡∏™‡πÄ‡∏î‡∏¥‡∏°
        foreach (Transform child in questListParent.transform)
        {
            Destroy(child.gameObject);
        }

        if (QuestManager.Instance == null) return;
        // üõë ‡πÉ‡∏ä‡πâ GetAllQuests() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥
        List<IQuest> allQuests = QuestManager.Instance.GetAllQuests();

        if (allQuests.Count == 0)
        {
            GameObject noQuestText = Instantiate(questButtonPrefab, questListParent.transform);
            noQuestText.GetComponentInChildren<TextMeshProUGUI>().text = "You have no active quests.";
            if(noQuestText.GetComponent<Button>() != null)
            {
                noQuestText.GetComponent<Button>().enabled = false;
            }
        }
        else
        {
            foreach (IQuest quest in allQuests)
            {
                GameObject newButtonObj = Instantiate(questButtonPrefab, questListParent.transform);
                Button newButton = newButtonObj.GetComponent<Button>();
                newButtonObj.GetComponentInChildren<TextMeshProUGUI>().text = quest.QuestName;
                newButton.onClick.AddListener(() => DisplayQuestDetails(quest));
            }
        }
    }

    public void DisplayQuestDetails(IQuest quest)
    {
        _selectedQuest = quest;
        questListParent.SetActive(false);
        questDetailPanel.SetActive(true);
        
        detailQuestNameText.text = quest.QuestName;
        detailQuestDescriptionText.text = quest.Description;
        UpdateQuestProgressText(quest);

        // Logic ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Ñ‡∏ß‡∏™:
        // Accept: ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏£‡∏±‡∏ö
        acceptButton.gameObject.SetActive(!quest.IsAccepted);
        
        // Cancel: ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß (‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à)
        // üí° ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á Cancel ‡πÄ‡∏°‡∏∑‡πà‡∏≠ IsAccepted ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡πÅ‡∏•‡∏∞ IsCompleted ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡πá‡∏à
        cancelButton.gameObject.SetActive(quest.IsAccepted && !quest.IsCompleted); 
        
        // Complete: ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏ß‡∏™‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß
        completeButton.gameObject.SetActive(quest.IsCompleted);

        // ‡∏•‡πâ‡∏≤‡∏á Listener ‡πÄ‡∏î‡∏¥‡∏°
        acceptButton.onClick.RemoveAllListeners();
        cancelButton.onClick.RemoveAllListeners();
        backButton.onClick.RemoveAllListeners();
        completeButton.onClick.RemoveAllListeners();

        // ‡∏ú‡∏π‡∏Å Listener ‡πÉ‡∏´‡∏°‡πà
        if(!quest.IsAccepted)
        {
            acceptButton.onClick.AddListener(AcceptQuest);
        }
        else if (quest.IsAccepted && !quest.IsCompleted)
        {
            cancelButton.onClick.AddListener(CancelQuest);
        }
        
        backButton.onClick.AddListener(HideQuestDetails);
        completeButton.onClick.AddListener(CompleteQuest);
    }
    
    public void UpdateQuestProgressText(IQuest quest)
    {
        if (questProgressText != null)
        {
            questProgressText.text = quest.ProgressText;
        }
    }

    private void HideQuestDetails()
    {
        questDetailPanel.SetActive(false);
        questListParent.SetActive(true);
    }

    // ===================================
    // QUEST ACTIONS
    // ===================================

    public void AcceptQuest()
    {
        if (_selectedQuest != null && QuestManager.Instance != null)
        {
            // üõë ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÉ‡∏´‡∏°‡πà AcceptQuest ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡πÄ‡∏Ñ‡∏ß‡∏™‡πÑ‡∏õ Active List
            QuestManager.Instance.AcceptQuest(_selectedQuest); 
            HideQuestDetails();
            DisplayQuestList();
        }
    }

    public void CancelQuest()
    {
        if (_selectedQuest != null && QuestManager.Instance != null)
        {
            QuestManager.Instance.RemoveQuest(_selectedQuest);
            HideQuestDetails();
            DisplayQuestList();
        }
    }
    
    public void CompleteQuest()
    {
        if (_selectedQuest != null && _selectedQuest.IsCompleted && QuestManager.Instance != null)
        {
            // ‚úÖ 1. ‡∏°‡∏≠‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
            GiveRewards(_selectedQuest);

            // 2. ‡∏™‡∏±‡πà‡∏á QuestManager ‡∏•‡∏ö‡πÄ‡∏Ñ‡∏ß‡∏™‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Active List
            QuestManager.Instance.CompleteQuest(_selectedQuest);
            
            HideQuestDetails();
            DisplayQuestList();
        }
    }

    // ===================================
    // REWARD LOGIC
    // ===================================

    // ‚úÖ ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
    private void GiveRewards(IQuest quest)
    {
        // ‡∏°‡∏≠‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÄ‡∏á‡∏¥‡∏ô
        if (CurrencyController.instance != null && quest.MoneyReward > 0)
        {
            float rewardAmount = quest.MoneyReward;
            CurrencyController.instance.AddMoney(rewardAmount); 
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            ShowRewardNotification($"get reward {rewardAmount}!", notificationDisplayTime);
        }
        
        // üí° ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° Logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
    }

    // ‚úÖ ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
    public void ShowRewardNotification(string message, float duration)
    {
        if (rewardNotificationText != null)
        {
            // ‡∏´‡∏¢‡∏∏‡∏î Coroutine ‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏î‡πâ
            StopAllCoroutines();

            rewardNotificationText.text = message;
            rewardNotificationText.gameObject.SetActive(true);

            // ‡πÄ‡∏£‡∏¥‡πà‡∏° Coroutine ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            StartCoroutine(HideNotificationAfterDelay(duration));
        }
    }

    // ===================================
    // SCENE MANAGEMENT
    // ===================================

    // ‚úÖ 1. ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô (‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° GoToLobbyButton ‡πÄ‡∏î‡∏¥‡∏°)
    public void ShowLobbyConfirmation()
    {
        // ‡∏õ‡∏¥‡∏î UI ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà (‡πÄ‡∏ä‡πà‡∏ô Quest Panel)
        if (questPanel.activeSelf)
        {
            questPanel.SetActive(false);
        }

         confirmationPanel.SetActive(true);
    
     // ‚úÖ ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡πâ‡∏≠‡∏á RemoveAllListeners ‡∏Å‡πà‡∏≠‡∏ô Add ‡πÄ‡∏™‡∏°‡∏≠
        confirmLobbyButton.onClick.RemoveAllListeners();
        cancelLobbyButton.onClick.RemoveAllListeners();

        // ‡∏ú‡∏π‡∏Å Listener ‡πÉ‡∏´‡∏°‡πà:
        confirmLobbyButton.onClick.AddListener(GoToLobby);
        cancelLobbyButton.onClick.AddListener(HideLobbyConfirmation);
    }
    
    // ‚úÖ 2. ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ã‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
    public void HideLobbyConfirmation()
    {
        confirmationPanel.SetActive(false);
    }

    //Go to HomeLobby
     public void GoToLobby()
    {
        // üí° ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏Å‡∏° (Save Game) ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏Å‡πà‡∏≠‡∏ô
        
        Debug.Log($"Loading Lobby scene: {lobbySceneName}");
        
        // ‡πÉ‡∏ä‡πâ SceneManager ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏â‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà
        SceneManager.LoadScene(lobbySceneName);
    }

    // ‚úÖ Coroutine ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    private IEnumerator HideNotificationAfterDelay(float delay)
    {
        yield return new WaitForSeconds(delay);
        if(rewardNotificationText != null)
        {
            rewardNotificationText.gameObject.SetActive(false);
        }
    }

    /// <summary>
    /// ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏û‡∏≤‡πÄ‡∏ô‡∏•‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (Question Panel)
    /// </summary>
    public void ToggleQuestionPanel()
    {
        if (questionPanel != null)
        {
            // üõë ‡∏™‡∏±‡πà‡∏á‡∏õ‡∏¥‡∏î‡∏û‡∏≤‡πÄ‡∏ô‡∏• Quest ‡πÄ‡∏™‡∏°‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î Question Panel
            if (questPanel.activeSelf)
            {
                questPanel.SetActive(false);
            }

            // Toggle ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Question Panel
            bool isActive = !questionPanel.activeSelf;
            questionPanel.SetActive(isActive);
            Debug.Log($"Question Panel: {(isActive ? "Opened" : "Closed")}");
        }
        else
        {
            Debug.LogError("Question Panel GameObject is not assigned in the UIManager Inspector!");
        }
    }
}